// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.furianrt.donotcallme.di.application;

import android.content.ContentResolver;
import android.content.Context;
import com.furianrt.donotcallme.contacts.ContactActivity;
import com.furianrt.donotcallme.contacts.ContactActivity_MembersInjector;
import com.furianrt.donotcallme.contacts.ContactContract;
import com.furianrt.donotcallme.data.DataManager;
import com.furianrt.donotcallme.data.prefs.PreferencesHelper;
import com.furianrt.donotcallme.data.room.ContactDatabase;
import com.furianrt.donotcallme.di.presenter.PresenterComponent;
import com.furianrt.donotcallme.di.presenter.PresenterModule;
import com.furianrt.donotcallme.di.presenter.PresenterModule_ProvideBlackListPresenterFactory;
import com.furianrt.donotcallme.di.presenter.PresenterModule_ProvideContactPresenterFactory;
import com.furianrt.donotcallme.di.presenter.PresenterModule_ProvideWhiteListPresenterFactory;
import com.furianrt.donotcallme.main.blacklist.BlackListContract;
import com.furianrt.donotcallme.main.blacklist.BlackListFragment;
import com.furianrt.donotcallme.main.blacklist.BlackListFragment_MembersInjector;
import com.furianrt.donotcallme.main.whitelist.WhiteListContract;
import com.furianrt.donotcallme.main.whitelist.WhiteListFragment;
import com.furianrt.donotcallme.main.whitelist.WhiteListFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<String> provideDatabaseNameProvider;

  private Provider<ContactDatabase> provideContactDatabaseProvider;

  private Provider<String> providePrefFolderNameProvider;

  private Provider<PreferencesHelper> providePreferencesHelperProvider;

  private Provider<ContentResolver> provideContentResolverProvider;

  private Provider<DataManager> provideDataManagerProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));
    this.provideDatabaseNameProvider =
        DoubleCheck.provider(AppModule_ProvideDatabaseNameFactory.create(builder.appModule));
    this.provideContactDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideContactDatabaseFactory.create(
                builder.appModule, provideContextProvider, provideDatabaseNameProvider));
    this.providePrefFolderNameProvider =
        DoubleCheck.provider(AppModule_ProvidePrefFolderNameFactory.create(builder.appModule));
    this.providePreferencesHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvidePreferencesHelperFactory.create(
                builder.appModule, provideContextProvider, providePrefFolderNameProvider));
    this.provideContentResolverProvider =
        DoubleCheck.provider(
            AppModule_ProvideContentResolverFactory.create(
                builder.appModule, provideContextProvider));
    this.provideDataManagerProvider =
        DoubleCheck.provider(
            AppModule_ProvideDataManagerFactory.create(
                builder.appModule,
                provideContactDatabaseProvider,
                providePreferencesHelperProvider,
                provideContentResolverProvider));
  }

  @Override
  public PresenterComponent newPresenterComponent(PresenterModule module) {
    return new PresenterComponentImpl(module);
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }

  private final class PresenterComponentImpl implements PresenterComponent {
    private final PresenterModule presenterModule;

    private Provider<BlackListContract.Presenter> provideBlackListPresenterProvider;

    private Provider<WhiteListContract.Presenter> provideWhiteListPresenterProvider;

    private Provider<ContactContract.Presenter> provideContactPresenterProvider;

    private PresenterComponentImpl(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideBlackListPresenterProvider =
          DoubleCheck.provider(
              PresenterModule_ProvideBlackListPresenterFactory.create(
                  presenterModule, DaggerAppComponent.this.provideDataManagerProvider));
      this.provideWhiteListPresenterProvider =
          DoubleCheck.provider(
              PresenterModule_ProvideWhiteListPresenterFactory.create(
                  presenterModule, DaggerAppComponent.this.provideDataManagerProvider));
      this.provideContactPresenterProvider =
          DoubleCheck.provider(
              PresenterModule_ProvideContactPresenterFactory.create(
                  presenterModule, DaggerAppComponent.this.provideDataManagerProvider));
    }

    @Override
    public void inject(BlackListFragment fragment) {
      injectBlackListFragment(fragment);
    }

    @Override
    public void inject(WhiteListFragment fragment) {
      injectWhiteListFragment(fragment);
    }

    @Override
    public void inject(ContactActivity activity) {
      injectContactActivity(activity);
    }

    private BlackListFragment injectBlackListFragment(BlackListFragment instance) {
      BlackListFragment_MembersInjector.injectMPresenter(
          instance, provideBlackListPresenterProvider.get());
      return instance;
    }

    private WhiteListFragment injectWhiteListFragment(WhiteListFragment instance) {
      WhiteListFragment_MembersInjector.injectMPresenter(
          instance, provideWhiteListPresenterProvider.get());
      return instance;
    }

    private ContactActivity injectContactActivity(ContactActivity instance) {
      ContactActivity_MembersInjector.injectMPresenter(
          instance, provideContactPresenterProvider.get());
      return instance;
    }
  }
}
