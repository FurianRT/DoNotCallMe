// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.furianrt.donotcallme.di.application;

import android.content.ContentResolver;
import com.furianrt.donotcallme.data.DataManager;
import com.furianrt.donotcallme.data.prefs.PreferencesHelper;
import com.furianrt.donotcallme.data.room.ContactDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDataManagerFactory implements Factory<DataManager> {
  private final AppModule module;

  private final Provider<ContactDatabase> databaseProvider;

  private final Provider<PreferencesHelper> prefsProvider;

  private final Provider<ContentResolver> contentResolverProvider;

  public AppModule_ProvideDataManagerFactory(
      AppModule module,
      Provider<ContactDatabase> databaseProvider,
      Provider<PreferencesHelper> prefsProvider,
      Provider<ContentResolver> contentResolverProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
    this.prefsProvider = prefsProvider;
    this.contentResolverProvider = contentResolverProvider;
  }

  @Override
  public DataManager get() {
    return Preconditions.checkNotNull(
        module.provideDataManager(
            databaseProvider.get(), prefsProvider.get(), contentResolverProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<DataManager> create(
      AppModule module,
      Provider<ContactDatabase> databaseProvider,
      Provider<PreferencesHelper> prefsProvider,
      Provider<ContentResolver> contentResolverProvider) {
    return new AppModule_ProvideDataManagerFactory(
        module, databaseProvider, prefsProvider, contentResolverProvider);
  }
}
